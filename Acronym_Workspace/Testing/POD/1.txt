In object-oriented programming and computer science, a passive data structure (PDS) is a term for a record, to contrast with objects. That is, a PDS is a data structure that is represented only as passive collections of field values (instance variables), without using object-oriented features. It is also known as a plain old data structure, or plain old data.
Passive data structures are appropriate when there is a part of a system where it should be clearly indicated that the detailed logic for data manipulation and integrity are elsewhere. PDSs are often found at the boundaries of a system, where information is being moved to and from other systems or persistent storage and the problem domain logic that is found in other parts of the system is not relevant. For example, PDS would be convenient for representing the field values of objects that are being constructed from external data, in a part of the system where the semantic checks and interpretations needed for valid objects have not yet been applied.
A PDS type in C++ is defined as either a scalar type or a PDS class. A PDS class has no user-defined copy assignment operator, no user-defined destructor, and no non-static data members that are not themselves PDS. Moreover, a PDS class must be an aggregate, meaning it has no user-declared constructors, no private nor protected non-static data, no base classes and no virtual functions. The standard includes statements about how PDS must behave in C++. The type_traits library in the C++ Standard Library, provides a function known as is_pod that can be used to determine whether a given type is a POD.
In certain contexts, C++ allows only PDS types to be used. For example, a union in C++98 cannot contain a class that has virtual functions or nontrivial constructors or destructors. This restriction is imposed because the compiler cannot determine which constructor or destructor should be called for a union. PDS types can also be used for interfacing with C, which supports only PDS.
In Java, some developers consider that the PDS concept corresponds to a class with public data members and no methods (Java Code Conventions 10.1),[1] i.e., a data transfer object. Others would also include POJOs (a class that has methods but only getters and setters, with no logic) and Java Beans to fall under the PDS concept if they do not use event handling and do not implement additional methods beyond getters and setters. However, POJOs and Java Beans do have encapsulation and so violate the fundamental definition of PDS.
In PHP associated arrays and stdClass objects can be considered PDS.
Other structured data representations such as XML or JSON can also be used as a PDS if no significant semantic restrictions are used.


== References ==


== See also ==
Plain Old C++ Object
Plain Old Java Object
Plain Old CLR Object