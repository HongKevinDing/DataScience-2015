A Trim command (commonly typeset as TRIM) allows an operating system to inform a solid-state drive (SSD) which blocks of data are no longer considered in use and can be wiped internally.
Trim was introduced soon after SSDs were introduced. Because low-level operation of SSDs differs significantly from hard drives, the typical way in which operating systems handle operations like deletes and formats resulted in unanticipated progressive performance degradation of write operations on SSDs. Trimming enables the SSD to handle garbage collection overhead, which would otherwise significantly slow down future write operations to the involved blocks, in advance.
Although tools to "reset" some drives to a fresh state were already available before the introduction of trimming, they also delete all data on the drive, which makes them impractical to use for ongoing optimization. By 2014 many SSDs had internal idle/background garbage collection mechanisms that work independently of trimming; although this successfully maintains their performance even under operating systems that do not support Trim, it has the associated drawbacks of increased write amplification and wear of the flash cells.


== Flash drive specific issues ==
Because of the way that many file systems handle delete operations, by flagging data blocks as "not in use", storage media (SSDs, but also traditional hard drives) generally do not know which sectors/pages are truly in use and which can be considered free space. Contrary to, for example an overwrite operation, a delete will not involve a physical write to the sectors that contain the data. Since a common SSD has no knowledge of the file system structures, including the list of unused blocks/sectors, the storage medium remains unaware that the blocks have become available. While this often enables undelete tools to recover files from electromechanical hard disks, despite the files being reported as "deleted" by the operating system, it also means that when the operating system later performs a write operation to one of the sectors, which it considers free space, it effectively becomes an overwrite operation from the point of view of the storage medium. For magnetic disks this is no different from writing an empty sector, but because of how some SSDs function at the lowest level, an overwrite produces significant overhead compared to writing data into an empty page, potentially crippling write performance.
SSDs store data in flash memory cells that are grouped into pages typically of 4 to 16 kB, grouped together into blocks of typically 128 to 512 pages, e.g., 512 kB per block with 4 kB pages in 128-page blocks. NAND flash memory cells can only be directly written to when they are empty. If they may contain data, the contents must be erased before a write operation. An SSD write operation can be done on a single page but, due to hardware limitations, erase commands always affect entire blocks; consequently writing data to empty pages on an SSD is very fast, but slows down considerably once previously written pages need to be overwritten. Since an erase of the cells in the page is needed before it can be written again, but only entire blocks can be erased, an overwrite will initiate a read-erase-modify-write cycle: the contents of the entire block are stored in cache, then the entire block is erased from the SSD, then the overwritten page is written to the cached block, and only then can the entire updated block be written to the flash medium. This phenomenon is known as write amplification.


== Operation ==
The Trim command is designed to enable the operating system to notify the SSD which pages no longer contain valid data due to erases either by the user or operating system itself. During a delete operation, the OS will mark the sectors as free for new data and send a Trim command to the SSD to mark them as not containing valid data. After that the SSD knows not to preserve the contents of the block when writing a page, resulting in less write amplification with fewer writes to the flash, higher write speed, and increased drive life.
Different SSDs implement the Trim command somewhat differently, so performance can vary.
Trim irreversibly deletes from the SSD the data Trim affects. Recovery of data deleted by Trim is not possible. This is unlike a magnetic drive from which deleted data may often be recovered.


== Shortcomings ==
When encryption is in use, using the Trim command reveals information about which blocks are in use and which are not.
Trim has been defined as a non-queued command by the T13 subcommittee, and consequently incurs massive execution penalty if used carelessly, e.g., if sent after each filesystem delete command. The non-queued nature of the command requires the driver to first finish any operation, issue the trim command, then resume normal commands. Trim can take a lot of time to complete depending on the firmware in the SSD and may even trigger a garbage collection cycle. This penalty can be minimized in solutions that periodically do a batched trim, rather than trimming upon every file deletion, by scheduling such batch jobs for times when system utilization is minimal. This Trim shortcoming has been overcome in Serial ATA revision 3.1 with the introduction of the Queued Trim Command.
TRIM commands have been linked to serious data corruption in several devices, most notably Samsung 8* series. The data corruption has been confirmed for the Linux operating system on these devices as of July 1, 2015
Devices that don't properly handle queued TRIM commands:
Micron_M500
Crucial_CT*M500
Micron_M5[15]0
Crucial_CT*M550
Crucial_CT*MX100
Samsung SSD 8


== Implementation ==


=== Operating system support ===
Trimming is only effective on operating systems which support it. The table below identifies each notable operating system and the first version supporting the command. Additionally, older solid-state drives designed before the addition of the Trim command to the ATA standard will need firmware updates, otherwise the new command will be ignored. However, not every drive can be upgraded to support Trimming.


=== RAID issues ===
The RST (Rapid Storage Technology option ROM) and drivers are only allowing trim to pass to the controller onto the drive in Intel 7 series chipsets using driver versions 11.2.0.0 or later. For Intel chipsets such as the 6 series and the newest X79, a modified (option ROM) must be used on these chipsets to allow trim to be received at the drive. The exception to the X79 chipset is if the motherboard manufacturer has added a ROM switch; this entails both the RST and RST-E ROMs being inside the BIOS/UEFI. This allows the RST ROM to be used, allowing trim to function, as trim does not work on the RST-E ROM. The official response from Intel is, best performance can be achieved by using a driver with same version as the ROM; for example if the BIOS/UEFI has an 11.0.0.0m option ROM, then use an 11.x version driver.
As of January 2012, support for the Trim command has not been implemented in most hardware based RAID technologies. Software RAID implementations often do include support for TRIM. For example, TRIM has been supported for Mac OS X RAID volumes since 2011, using the SoftRAID application, including TRIM and RAID support for all non-Apple SSD devices. (While Mac OS 10.10 disabled support for TRIM on third-party devices as part of its extensions security enhancements, as of July 1, 2015, the Mac OS 10.10.4 update officially allows users to enable TRIM for third party SSD devices using the command line. However, Apple's RAID still does not support TRIM, so the third-party SoftRAID application is necessary to enable TRIM with RAID in Mac OS X.) Another case where it has been implemented is in post-January-2011 releases of the Linux kernel's dmraid, which implements BIOS-assisted "fake hardware RAID" support, and now passes through any Trim requests from the filesystem that sits on the RAID array. Not to be confused with dmraid, Linux's general-purpose software RAID system, mdraid, has experimental support for batch-based (rather than live, upon file deletion), Trim on RAID 1 arrays when systems are configured to periodically run the mdtrim utility on filesystems (even those like ext3 without native Trim support). For a short time in March 2010, users were led to believe that the Intel Rapid Storage Technology (RST) 9.6 drivers supported Trim in RAID volumes, but Intel later clarified that Trim was supported for the BIOS settings of AHCI mode and RAID mode, but not if the drive was part of a RAID volume.
As of November 2011, Intel has indicated in the release notes for RST 11.5 Alpha that they intend to add support for Trim on RAID 0 volumes in the next version of RST. Red Hat has also recommended against using software RAID levels 1, 4, 5, and 6 on SSDs, because during initialization, most RAID management utilities (e.g. Linux's mdadm) write to all blocks on the devices to ensure that checksums (or drive-to-drive verifies, in the case of RAID 1) operate properly, causing the SSD to believe that all blocks other than in the spare area are in use, significantly degrading performance.
As of August 2012, Intel confirms that 7-series chipsets with Rapid Storage Technology (RST) 11.2 drivers will support TRIM for RAID 0 in Microsoft Windows 7. While Intel did not confirm support for 6-series chipsets, TRIM on RAID 0 volumes has been shown to work on Z68 and P67 chipsets by hardware enthusiasts with a modified RAID option ROM. It is speculated that the lack of official support for 6-series chipsets is due to validation costs or an attempt to encourage consumers to upgrade, rather than for technical reasons.


=== Enabling unsupported operating systems ===
Where the filesystem does not automatically support Trim, some utilities can send trimming commands manually. Usually they determine which blocks are free and then pass this list as a series of trimming commands to the drive. These utilities are available from various manufacturers (Intel, G.Skill) or as general utilities (hdparm since v9.17).


== Hardware support ==


=== ATA ===
The TRIM command specification is being standardized as part of the AT Attachment (ATA) interface standard, led by Technical Committee T13 of the International Committee for Information Technology Standards (INCITS). TRIM is implemented under the DATA SET MANAGEMENT command (opcode 06h) the draft ACS-2 specification. The ATA standard is supported by both parallel (IDE, PATA) and serial (SATA) ATA hardware.
A drawback of the original ATA TRIM command is that it was defined as a non-queueable command and therefore could not easily be mixed with a normal workload of queued read and write operations. SATA 3.1 introduced a queued TRIM command to remedy this.
There are different types of Trim defined by SATA Words 69 and 169 returned from an ATA IDENTIFY DEVICE command:
Non-deterministic Trim: each read command to the Logical block address (LBA) after a Trim may return different data.
Deterministic Trim (DRAT): all read commands to the LBA after a Trim shall return the same data, or become determinate.
Deterministic Read Zero after Trim (DZAT): all read commands to the LBA after a Trim shall return zero.
There is additional information in SATA Word 105 that describes the Maximum number of 512-byte blocks per DATA SET MANAGEMENT command that a drive can support. Typically this defaults to 8 (or 4 kB) but many drives reduce this to one to meet the Microsoft Windows Hardware Requirements for Trim, Command completion time shall not exceed 20 ms or 8 ms × (number of LBA range entries), whichever is greater, and shall always be less than 600 ms. http://msdn.microsoft.com/en-us/library/windows/hardware/jj134356.aspx An individual LBA range is called an LBA Range Entry and is represented by eight bytes. The LBA is expressed by the LBA Range Entry's first six bytes and the Range Length is a zero based number (e.g., 0=0 and 1=1)represented by the remaining two bytes. If the two byte range length is zero, then the LBA Range Entry shall be discarded as padding.(need reference to T13 ATA/ATAPI Command Set - 3 (ACS-3)) This means that for each 512 byte block of Trim ranges that a device supports, the maximum is 64 ranges of 32 MB, or 2 GB. If a device supports SATA Word 105 at 8 then it should be able to trim 16 GB in a single Trim (DATA SET MANAGEMENT) command.


=== SCSI ===
SCSI provides UNMAP command (full analog of TRIM) and WRITE SAME (10,16) commands with unmap flag.


=== SD/MMC ===
The MultiMediaCard and SD ERASE (CMD38) command provides similar functionality to the ATA TRIM command, although it requires that erased blocks be overwritten with either zeroes or ones. eMMC 4.5 further defines a "discard" sub-operation that more closely matches ATA TRIM in that the contents of discarded blocks can be considered indeterminate (i.e., "don't care").


== See also ==
Data remanence


== References ==


== External links ==
From write() down to flash chips –  an explanation on how the Trim command lets SSDs erase data not used by the filesystem
TRIM Command White Paper –  a white paper explaining the Trim command's purpose and actions
Fusion-io Patent "Apparatus, system, and method for redundant write caching"